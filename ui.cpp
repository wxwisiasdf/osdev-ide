#include <FL/Fl_Input.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Text_Editor.H>
#include <FL/Fl_Text_Display.H>
#include <FL/Fl_File_Chooser.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Tabs.H>
#include "ui.hpp"
#include "project.hpp"
#include "qemu.hpp"
#include "tab.hpp"
#include "editor.hpp"

#include <unistd.h>
#include "buffer.hpp"
#include "find.hpp"

// Globals
int globalFontsize = 24;
Fl_Window * globalWindow;
Fl_Menu_Bar * globalMenuBar;

#include <FL/Fl_File_Icon.H>
Fl_Tree * ui_project_to_tree(std::array<std::vector<std::string>, 2> project) {
	//tree = new Fl_Tree(0,24,320,window->decorated_h()-fontsize);

	globalProjectTree->clear();

	// Add directories to project tree, and show them with a nice folder icon
	for(const auto& dir: project.at(0)) {
		globalProjectTree->add(dir.c_str());
	}

	// Add files
	for(const auto& file: project.at(1)) {
		globalProjectTree->add(file.c_str());
		//globalProjectTree->usericon(Fl_File_Icon::ANY);
	}

	globalProjectTree->resizable(globalProjectTree);
	globalProjectTree->showroot(false);
	return globalProjectTree;
}

void ui_exit(Fl_Widget * widget, void * data) {
	exit(0);
}

// Creates new buffer when we click on the project tree
void ui_project_tree_callback(Fl_Widget * widget, void * data) {
	Fl_Tree * tree = (Fl_Tree *)widget;
	Fl_Tree_Item * item = tree->callback_item();
	if(item == nullptr) {
		return;
	}

	char * path = new char[8192];
	std::string end_path = "/";
	tree->item_pathname(path,8192,item);
	end_path += path;

	switch(tree->callback_reason()) {
	case FL_TREE_REASON_SELECTED:
		tab_open_file(end_path,globalTabManager);
		break;
	default:
		break;
	}
	return;
}

void ui_open_file_callback(Fl_Widget * widget, void * data) {
	const char * end_path = fl_file_chooser("Open file","Any file (*.*)",NULL,0);
	if(end_path != NULL) {
		tab_open_file(end_path,globalTabManager);
	}
	return;
}

void ui_close_file_callback(Fl_Widget * widget, void * data) {
	Fl_Widget * tabOfFile;
	tabOfFile = globalTabManager->value();
	if(tabOfFile == NULL) {
		printf("No file to close\n");
		return;
	}
	globalTabManager->remove(tabOfFile);
	delete tabOfFile;

	// We need to redraw everything
	globalWindow->redraw();
}

void ui_save_file_callback(Fl_Widget * widget, void * data) {
	Fl_Text_Editor * editor;
	editor = editor_current();

	Fl_Text_Buffer * fileBuffer = editor->buffer();
	if(fileBuffer == NULL)
		return;

	FileTab * tab;
	tab = tab_current();
	std::string fullFileName = tab->full_name;

	// Find in array
	FILE * fp;
	fp = fopen(fullFileName.c_str(),"wt");
	if(fp == NULL) {
		printf("Cannot truncate file\n");
		return;
	}
	fputs(fileBuffer->text(),fp);
	fclose(fp);
}

void ui_save_as_file_callback(Fl_Widget * widget, void * data) {
	Fl_Text_Editor * editor;
	editor = editor_current();

	Fl_Text_Buffer * fileBuffer = editor->buffer();
	if(fileBuffer == NULL)
		return;

	const char * end_path = fl_file_chooser("Save file","Any file (*.*)","new_file.c",0);

	FileTab * tab;
	tab = tab_current();
	std::string fullFileName = tab->full_name;

	// Find in array
	FILE * fp;
	fp = fopen(end_path,"wt");
	if(fp == NULL) {
		printf("Cannot truncate file\n");
		return;
	}
	fputs(fileBuffer->text(),fp);
	fclose(fp);
}

void ui_enable_traces_dialog(Fl_Widget * widget, void * data) {
	return;
}

void ui_do_build_callback(Fl_Widget * widget, void * data) {
	const char * buildlog = tempnam("/tmp","ql");
	std::string cmd = std::string((const char *)data)+" 2>&1";

	std::unique_ptr<FILE,decltype(&pclose)> pipe(popen(cmd.c_str(),"r"),pclose);
	std::string result;
	if(!pipe) {
		throw std::runtime_error("popen failed\n");
	}
	tab_open_file(buildlog,globalTabManager);

	std::array<char,256> buffer;
	while(fgets(buffer.data(),buffer.size(),pipe.get()) != nullptr) {
		result += buffer.data();
		
		auto * tab = tab_current();
		if(tab != NULL) {
			tab->textbuf->append(result.c_str());
		}
	}
	return;
}

#include <iostream>
static inline void ui_open_project_common(const char * dir) {
	if(dir == NULL) {
		return;
	}

	project_open(dir);
	globalProjectTree = ui_project_to_tree(globalProject.paths);

	// Remove everything inside Build/
	for(const auto& buildRule : globalProject.buildRules) {
		std::string endItem = "Build/"+buildRule.first;
		globalMenuBar->insert(-1,endItem.c_str(),0,ui_do_build_callback,(void * )buildRule.second.c_str(),0);
		std::cout << "Add " + endItem << std::endl;
	}
	globalMenuBar->redraw();
}

void ui_when_project_gets_opened(Fl_File_Chooser * widget, void * data) {
	ui_open_project_common(widget->directory());
}

void ui_open_project(Fl_Widget * widget, void * data) {
	//const char * pattern = "C Files (*.c)\tC Header Files (*.h)\tC++ Source Files (*.cpp)\tASM Source code (*.S)";
	const char * dir;
	dir = fl_dir_chooser("Open directory","/home",0);
	if(dir != NULL) {
		globalCurrentDir = dir;
		printf("Directory opened: %s\n",dir);
		ui_open_project_common(dir);
	}
}

const char * x86_asm_stub = ""
"; Automatically generated by OS Developement IDE\n"
"\n"
"org 7c00h\n"
"bits 16\n"
"\n"
"boot_start:\n"
"\tcli\n"
"\tmov ax, 7c00h\t\t; set appropriate stack\n"
"\tadd ax, 4096+512\t; 4096 bytes after bootloader\n"
"\txor bx, bx\t\t; set stack super fast\n"
"\tmov ss, ax\n"
"\tmov sp, bx\n"
"\n"
"\tmov si, hello_world_msg\t; print our hello world\n"
"\tcall print\n"
"\n"
"sleep:\n"
"\thlt\n"
"\tjmp short sleep\n"
"\n"
"print:\n"
"\txor al, al\n"
"\tmov ah, 0Eh\n"
".loop:\n"
"\tlodsb\n"
"\ttest al, al\n"
"\tjz short .end\n"
"\tint 10h\n"
".end:\n"
"\tret\n"
"\n"
"hello_world_msg: db 'Hello x86 asm world!',0x00"
"\n";

const char * riscv_asm_stub = ""
"; Automatically generated by OS Developement IDE\n"
".section .text\n"
"entry:\n"
"\tla gp, __global_ptr\t; set up our stack\n"
"\tla sp, __stack_end\n"
"\n"
"trampoline:\n"
"\twfi\t\t; spin forever\n"
"\tj trampoline\n"
"\n"
".section .bss\n"
"__global_ptr:\n"
".skip 8192\n"
"__stack_end:\n"
"\n";

const char * linker_script = ""
"# Automatically generated by OS Developement IDE\n"
"\n"
"ENTRY(_my_asm_entry);\n"
"\n"
"SECTIONS {\n"
"\t.text : {\n"
"\t\t*(.text);\n"
"\t}\n"
"\t.data : {\n"
"\t\t*(.data);\n"
"\t}\n"
"\t.bss : {\n"
"\t\t*(.bss);\n"
"\t\t. = ALIGN(4K);\n"
"\t\tPROVIDE(stack_top = .);\n"
"\t}\n"
"\t.rodata : {\n"
"\t\t*(.rodata);\n"
"\t}\n"
"}\n";

const char * c_stub = ""
"// Automatically generated by OS Developement IDE\n"
"\n"
"#include <stdint.h>\n"
"#include <stddef.h>\n"
"\n"
"void kmain(void) {\n"
"\twhile(1) {"
"\t\n"
"}\n"
"\treturn;\n"
"}\n";

const char * rust_stub = ""
"// Automatically generated by OS Developement IDE\n"
"\n"
"#include <stdint.h>\n"
"#include <stddef.h>\n"
"\n"
"pub fn kmain() {\n"
"\t\n"
"}\n";

void ui_create_file_stub(const char * extension, const char * stub) {
	FileTab * tab;
	const char * temp = tempnam("/tmp","nfile");
	std::string end_temp = temp;
	end_temp += extension;

	tab = tab_open_file(end_temp,globalTabManager);
	tab->textbuf->text(stub);
	buffer_restyle(tab->textbuf,tab->stylebuf);
}

Fl_Menu_Item globalMenuItems[] = {
	{"File",0,0,0,FL_SUBMENU},
		{"Open project",FL_CTRL+'p',ui_open_project,0},
		{"New",FL_CTRL+'n',[](Fl_Widget * widget, void * data) {
			ui_create_file_stub(".c",c_stub);
		},0,FL_SUBMENU},
			{"C",0,[](Fl_Widget * widget, void * data) {
				ui_create_file_stub(".c",c_stub);
			},0},
			{"Rust",0,[](Fl_Widget * widget, void * data) {
				ui_create_file_stub(".rust",rust_stub);
			},0},
			{"x86 Assembly",0,[](Fl_Widget * widget, void * data) {
				ui_create_file_stub(".asm",x86_asm_stub);
			},0},
			{"RISC-V Assembly",0,[](Fl_Widget * widget, void * data) {
				ui_create_file_stub(".S",riscv_asm_stub);
			},0},
			{"Linker script",0,[](Fl_Widget * widget, void * data) {
				ui_create_file_stub(".ld",linker_script);
			},0},
			{0},
		{"Open",FL_CTRL+'o',ui_open_file_callback,0},
		{"Save",FL_CTRL+'s',ui_save_file_callback,0},
		{"Save as",FL_CTRL+FL_ALT+'s',ui_save_as_file_callback,0},
		{"Close",FL_CTRL+'w',ui_close_file_callback,0},
		{"Quit",0,ui_exit,0},
		{0},
	{"Edit",0,0,0,FL_SUBMENU},
		{"Copy",FL_CTRL+'c',editor_copy,0},
		{"Paste",FL_CTRL+'v',editor_paste,0},
		{"Cut",FL_CTRL+'x',editor_cut,0},
		{"Undo",FL_CTRL+'z',editor_undo,0},
		{"Redo",FL_CTRL+'y',editor_redo,0},
		{"Find",FL_CTRL+'f',editor_find_callback,0},
		{"Replace",FL_CTRL+'r',find_show_dialog,0},
		{0},
	{"Run qemu",FL_CTRL+'q',qemu_run_callback,0,0},
	{0}
};

#include "device_man.hpp"
int ui_main_loop(int argc, const char ** argv) {
	globalWindow = new Fl_Window(1024,800,"Operating System Developement Oriented IDE");

	// Make menu toolbar
	globalMenuBar = new Fl_Menu_Bar(0,0,globalWindow->w(),globalFontsize);
	globalMenuBar->menu(globalMenuItems);
	globalWindow->add(globalMenuBar);
	globalWindow->resizable(globalWindow);

	// Create empty project tree
	//tree = ui_project_to_tree(project_get_paths("/home/superleaf1995/src/uDOS"));

	// Project tree
	globalProjectTree = new Fl_Tree(0,globalFontsize,320,globalWindow->decorated_h()-globalFontsize);
	globalProjectTree->callback(ui_project_tree_callback);
	globalWindow->add(globalProjectTree);

	// Add file tabs
	globalTabManager = new Fl_Tabs(globalProjectTree->w()+1,globalFontsize,globalWindow->w()-322,globalWindow->h()-globalFontsize);
	globalWindow->add(globalTabManager);

	qemu_get_devices();

	find_create_dialog();

	extern void qemu_create_device_dialog(void);
	qemu_create_device_dialog();

	extern void qemu_create_image_dialog(void);
	qemu_create_image_dialog();

	globalWindow->end();
	globalWindow->show(argc,(char **)argv);
	return(Fl::run());
}
